global !p

def namespace(snip, path):
	import os
	namespace = pathToNamespace(path)
	if (len(namespace) == 0):
		return ''
	return os.linesep + snip.mkline('namespace ' + namespace + ';') + os.linesep

def specNamespace(snip, path):
    import os
    namespace = ns(snip, path)
    if (len(namespace) == 0):
        return ''
    return os.linesep + snip.mkline('namespace '+namespace+';') + os.linesep

def bundleSpecNamespace(snip, path):
    import os
    namespace = 'spec\\'+bdNs(snip, path)
    if (len(namespace) == 0):
        return ''
    return os.linesep + snip.mkline('namespace '+namespace+';') + os.linesep

def ns(snip, path):
    import os
    namespace = pathToNamespace(path)
    exp = namespace.split('\\')
    namespace = '\\'.join(exp[1:])
    if (len(namespace) == 0):
        return ''
    return namespace

def bdNs(snip, path):
    import os
    namespace = pathToNamespace(path)
    exp = namespace.split('\\')
    namespace = ''
    find = False
    for ns in exp:
        if ns == "spec" and not find:
            find = True
        elif find:
            namespace += ns+'\\'
    if namespace[-1] == '\\':
        namespace = namespace[:-1]
    if (len(namespace) == 0):
        return ''
    return namespace

def pathToNamespace(path):
    import re
    path = path if path[0:2] != './' else path[2:]
    path = path.replace('/', '\\')
    path = re.sub(r'\b[^\\]*\Z', '', path)
    path = path.strip('\\')
    return re.sub(r'\A(\b[^A-Z][^\\]*\\)*', '', path)

endglobal

snippet i "Simple if insrtuction" !b
if ($1) {
    $0
}
endsnippet

snippet ie "Simple if else instruction" !b
if ($1) {
    $0
} else ($2) {

}
endsnippet

snippet f "Simple for instruction" !b
for (\$i = 0; \$i < $1; \$i++) {
    $0
}
endsnippet

snippet fe "Simple foreach instruction" !b
foreach ($1 as $2) {
    $0
}
endsnippet

snippet cl "Display a class" !b
<?php
`!p snip.rv = namespace(snip, path)`
class `!p snip.rv = snip.basename` $1
{
    ${0://implementation ...}
}
endsnippet

snippet cld "Display a class with doc" !b
<?php
`!p snip.rv = namespace(snip, path)`
/**
 * ${2:Class doc ..}
 *
 * @author Nicolas Panau <npanau@umanit.fr>
 */
class `!p snip.rv = snip.basename` $1
{
    ${0://implementation ...}
}
endsnippet

snippet acl "Display abstract class" !b
<?php
`!p snip.rv = namespace(snip, path)`
abstract class `!p snip.rv = snip.basename` $1
{
    ${0://implementation ...}
}
endsnippet

snippet acld "Display abstract class with doc" !b
<?php
`!p snip.rv = namespace(snip, path)`
/**
 * ${2:Class doc ...}
 *
 * @author Nicolas Panau <npanau@umanit.fr>
 */
abstract class `!p snip.rv = snip.basename` $1
{
    ${0://implementation ...}
}
endsnippet

snippet unit "Display a phpunit class" !b
<?php
`!p snip.rv = namespace(snip, path)`
class `!p snip.rv = snip.basename` extends \PHPUnit_Framework_TestCase
{
    $0
}
endsnippet

snippet it "Generate an interface skeleton" !b
<?php
`!p snip.rv = namespace(snip, path)`
interface `!p snip.rv = snip.basename` $1
{
    ${0://implementation ...}
}
endsnippet

snippet itd "Generate an interface skeleton with doc" !b
<?php
`!p snip.rv = namespace(snip, path)`
/**
 * ${2:Interface doc ...}
 *
 * @author Nicolas Panau <npanau@umanit.fr>
 */
interface `!p snip.rv = snip.basename` $1
{
    ${0://implementation ...}
}
endsnippet

snippet fun "A simple function snippet" !b
${1:public} function ${2:name}(${3:\$value})
{
    ${0://some code here ...}
}
endsnippet

snippet fund "A simple function snippet with doc" !b
/**
 * ${4:Doc ...}
 */
${1:public} function ${2:name}(${3:\$value})
{
    ${0://some code here ...}
}
endsnippet

snippet func "A simple function" !b
function ${2:name}(${3:\$args})
{
    ${0://some code ...}
}
endsnippet

snippet cons "A simple constructor" !b
public function __construct(${1:$args})
{
    $0
}
endsnippet

snippet funcd "A simple function with doc" !b
/**
 * ${4:Doc ...}
 */
function ${2:name}(${3:\$args})
{
    ${0://some code ...}
}
endsnippet

snippet afun "A abstract function snippet" !b
abstract ${1:public} function ${2:name}(${3:\$arguments});
endsnippet

snippet afun "A abstract function snippet with doc" !b
/**
 * ${4:Doc ...}
 */
abstract ${1:public} function ${2:name}(${3:\$arguments});$0
endsnippet

snippet funi "Add a simple mehod signature" !b
public function ${1:name}(${3:\$args});
endsnippet

snippet funid "Add a simple mehod signature with doc" !b
/**
 * ${4:Doc ...}
 */
public function ${1:name}(${3:\$args});$0
endsnippet

snippet attr "Display an attribute" !b
${1:private} \$${2:value};
endsnippet

snippet attrd "Display an attribute with doc" !b
/**
 * @var ${3:string}
 */
${1:private} \$${2:value};$0
endsnippet

snippet use "Use statement" !b
use ${1:Class};
endsnippet

snippet getset "Generate getter and setter" !b
public function get${1/(.*)/\u$1/}()
{
    return \$this->$1;
}

public function set${1/(.*)/\u$1/}(\$$1)
{
    \$this->$1 = \$$1;

    return \$this;
}
endsnippet

snippet getsetd "Generate getter and setter with doc" !b
/**
 * Get $2
 *
 * @return ${3:string}
 */
public function get${1/(.*)/\u$1/}()
{
    return \$this->$1;
}

/**
 * Set $2
 *
 * @param $3 \$$1
 *
 * @return `!p snip.rv = snip.basename`
 */
public function set${1/(.*)/\u$1/}(\$$1)
{
    \$this->$1 = \$$1;

    return \$this;
}$0
endsnippet

snippet getsets "Generate getters and setters" !b
public function add${1/(.*)/\u$1/}(${1/(.*)/\u$1/} \$$1)
{
    \$this->$2->add(\$$1);

    return \$this;
}

public function get${1/(.*)/\u$1/}s()
{
    return \$this->$2->toArray();
}

public function has${1/(.*)/\u$1/}(${1/(.*)/\u$1/} \$$1)
{
    return \$this->$2->contains(\$$1);
}

public function remove${1/(.*)/\u$1/}(${1/(.*)/\u$1/} \$$1)
{
    \$this->$2->removeElement(\$$1);

    return \$this;
}
endsnippet

snippet dattr "Generate doctrine attribute column" !b
/**
 * @ORM\\Column$2
 */
private \$${1:name};
endsnippet

snippet dattrd "Generate doctrine attribute column with phpdoc" !b
/**
 * @var ${3:string}
 *
 * @ORM\\Column$2
 */
private \$${1:name};
endsnippet

snippet dcl "Generate a dotrine ORM class" !b
<?php
`!p snip.rv = namespace(snip, path)`
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name="$1")
 */
class `!p snip.rv = snip.basename` $2
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private \$id;

    $0
}
endsnippet

snippet drep "Generate a doctrine repository" !b
<?php
`!p snip.rv = namespace(snip, path)`
use Doctrine\ORM\EntityRepository;

class `!p snip.rv = snip.basename` extends EntityRepository
{
}
endsnippet

snippet radrep "Generate a RabBundle repository" !b
<?php
`!p snip.rv = namespace(snip, path)`
use Knp\RadBundle\Doctrine\EntityRepository;

class `!p snip.rv = snip.basename` extends EntityRepository
{
}
endsnippet

snippet author "Generate an author doc" !b
@author Nicolas Panau <npanau@umanit.fr>
endsnippet

snippet licence "Generate a Licence block" !b
/*
 * Part of ${1:Bundle}
 *
 * @author Nicolas Panau <npanau@umanit.fr>
 *
 * This code is under the MIT licence. For the full copyright and
 * licence please read the LICENSE file distributed with this package.
 */

endsnippet

snippet spec "Generate a phpspec class" !b
<?php
`!p snip.rv = specNamespace(snip, path)`
use PhpSpec\ObjectBehavior;

class `!p snip.rv = snip.basename` extends ObjectBehavior
{
    function it_should_be_initializable()
    {
        \$this->shouldHaveType('`!p snip.rv = ns(snip, path)`\\`!p snip.rv = snip.basename`');
    }
}
endsnippet

snippet bspec "Generate a spec class inside a bundle" !b
<?php
`!p snip.rv = bundleSpecNamespace(snip, path)`
use PhpSpec\ObjectBehavior;

class `!p snip.rv = snip.basename` extends ObjectBehavior
{
    function it_should_be_initializable()
    {
        \$this->shouldHaveType('`!p snip.rv = bdNs(snip, path)`\\`!p snip.rv = snip.basename.replace('Spec', '')`');
    }

    $0
}
endsnippet

snippet dd "Die and dump a variable" !b
die(var_dump(\$${1:var}));
endsnippet

snippet th "this" !b
\$this->$0
endsnippet

snippet th= "this equal" !b
\$this->$1 = \$$1;$0
endsnippet

snippet th=n "this equal null" !b
\$this->$1 = null;$0
endsnippet

snippet sfclass "Symfony controller class" !
<?php
`!p snip.rv = namespace(snip, path)`
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;

class `!p snip.rv = snip.basename` extends Controller
{
    ${0}

}
endsnippet

snippet act "Symfony controller action" !
/**
 * ${1}
 */
public function ${2}Action(Request $request)
{
    ${0}
    return array();
}
endsnippet

